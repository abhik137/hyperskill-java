type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import java.util.stream.IntStream;

    public class Board {
        private final char[][] grid = new char[3][3]; // x/i => row, y/j => column
        private int noOfX = 0;
        private int noOfO = 0;
        private int cellsFilled = 0;
        private PlayerHandle nextTurn = null;
        private BoardState gameStatus = BoardState.GAME_IN_PROGRESS;

        private final int MAX_CELLS = 9;
        private final int GRID_SIZE = grid.length;

        public Board() {
            for (int i = 0; i < GRID_SIZE; i++) {
                for (int j = 0; j < GRID_SIZE; j++) {
                    grid[i][j] = ' ';
                }
            }
        }

        public Board(String input) {
            int idx = 0;
            for (int i = 2; i >= 0; i--) {
                for (int j = 0; j < 3; j++) {
                    if (input.charAt(idx) == 'X'){
                        grid[i][j] = input.charAt(idx);
                        cellsFilled++;
                        noOfX++;
                    } else if (input.charAt(idx) == 'O') {
                        grid[i][j] = input.charAt(idx);
                        cellsFilled++;
                        noOfO++;
                    } else {  // (input.charAt(idx) == '_')
                        grid[i][j] = ' ';
                    }
                    idx++;
                }
            }
        }

        public void nextMove(int x, int y) {
            grid[x - 1][y - 1] = whoseTurnIsIt();
            cellsFilled++;
            updateGameStatus(x, y, nextTurn);
            nextTurn = nextPlayer();
        }

        private PlayerHandle nextPlayer() {
            if (this.nextTurn == PlayerHandle.X)
                return PlayerHandle.O;
            else
                return PlayerHandle.X;
        }

        private char whoseTurnIsIt() {
            if (nextTurn == null) {
                if (noOfX == noOfO)
                    nextTurn = PlayerHandle.X;
                else    // noOfX > noOfO
                    nextTurn = PlayerHandle.O;
            }
            return this.nextTurn.toString().charAt(0);
        }

        private void updateGameStatus(int x, int y, PlayerHandle currentPlayer) {
            boolean isGameWon = isGameWon(x, y, currentPlayer.toString().charAt(0));

            if (isGameWon && currentPlayer == PlayerHandle.X)
                this.gameStatus = BoardState.X_WINS;
            else if (isGameWon && currentPlayer == PlayerHandle.O)
                this.gameStatus = BoardState.O_WINS;
            else if (cellsFilled == MAX_CELLS)
                this.gameStatus = BoardState.DRAW;
            else
                this.gameStatus = BoardState.GAME_IN_PROGRESS;
        }

        private boolean checkRow(int x) {
            return IntStream.of(1, 2).allMatch(i -> grid[x][0] == grid[x][i]);  // i.e. grid[x][0] == grid[x][1] == grid[x][2]
        }

        private boolean checkColumn(int y) {
            return IntStream.of(1, 2).allMatch(i -> grid[0][y] == grid[i][y]);  // i.e. grid[0][y] == grid[1][y] == grid[2][y]
        }

        private boolean checkDiagonal(char c) {
            return (grid[0][0] == c && IntStream.of(1,2).allMatch(i -> grid[0][0] == grid[i][i])) ||    // grid[0,0] == grid[1,1] == grid[2,2]
                   (grid[0][2] == c && IntStream.of(1,2).allMatch(i -> grid[0][2] == grid[i][2 - i]));  // grid[0,2] == grid[1,1] == grid[2,0]
        }

        public boolean isGameWon(int x, int y, char player) {
            return checkRow(x - 1) || checkColumn(y - 1) || checkDiagonal(player);
        }

        public boolean isEmptyCell(int x, int y) {
            return grid[x - 1][y - 1] == ' ';
        }

        public void setCellEmpty(int x, int y) {
            grid[x - 1][y - 1] = ' ';
        }

        public void printBoard() {
            StringBuilder sb = new StringBuilder();
            sb.append("---------\n");
            for (int i = 2; i >= 0; i--) {
                sb.append("| ");
                for (int j = 0; j < 3; j++) {
                    sb.append(grid[i][j]);
                    sb.append(" ");
                }
                sb.append("|\n");
            }
            sb.append("---------");

            System.out.println(sb.toString());
        }

        public BoardState getGameStatus() {
            return this.gameStatus;
        }

        public char[][] getGrid() {
            return this.grid;
        }
    }
  learner_created: true
- name: src/tictactoe/player/HumanPlayer.java
  visible: true
  text: |
    package tictactoe.player;

    import tictactoe.Board;
    import tictactoe.BoardState;

    import java.util.Scanner;

    public class HumanPlayer implements Player {

        private Board board;
        private Scanner sc;

        public HumanPlayer(Board board, Scanner sc) {
            this.board = board;
            this.sc = sc;
        }

        @Override
        public void move() {
            boolean isValidCoordinate = false;

            while (!isValidCoordinate) {
                System.out.print("Enter the coordinates: ");
                String coordinates = sc.nextLine();

                if (isValidCoordinate = isValidCoordinate(coordinates)) {   // validate co-ordinates
                    String[] parts = coordinates.split(" ");
                    /*
                     * y is column, x is row, since the co-ordinate map is like this:
                     * (1, 3) (2, 3) (3, 3)
                     * (1, 2) (2, 2) (3, 2)
                     * (1, 1) (2, 1) (3, 1)
                     * the first co-ordinate represents the column
                     */
                    int y = Integer.parseInt(parts[0]);
                    int x = Integer.parseInt(parts[1]);   // +1 as we are assuming 1-indexing for input to nextMove()
                    board.nextMove(x, y);
                    board.printBoard();
                    if (board.getGameStatus() != BoardState.GAME_IN_PROGRESS) {
                        break;
                    }
                }
            }
        }

        private boolean isValidCoordinate(String coordinates) {
            String[] parts = coordinates.split(" ");
            try {
                int y = Integer.parseInt(parts[0]);
                int x = Integer.parseInt(parts[1]);

                if (x < 1 || x > 3 || y < 1 || y > 3) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    return false;
                }
                if (!board.isEmptyCell(x, y)) {
                    System.out.println("This cell is occupied! Choose another one!");
                    return false;
                }
            } catch (NumberFormatException e) {
                System.out.println("You should enter numbers!");
                return false;
            }
            return true;
        }
    }
  learner_created: true
- name: src/tictactoe/BoardState.java
  visible: true
  text: |-
    package tictactoe;

    public enum BoardState {
        GAME_IN_PROGRESS("Game not finished"),
        DRAW("Draw"),
        X_WINS("X wins"),
        O_WINS("O wins");

        private final String stringStatus;

        BoardState(String status) {
            this.stringStatus = status;
        }

        public String getStringStatus() {
            return this.stringStatus;
        }
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import tictactoe.player.Player;

    import java.util.List;
    import java.util.Scanner;

    public class Game {
        private Board board;
        private final Scanner sc = new Scanner(System.in);

        public void startGame() {
            while (true) {
                System.out.print("Input command: ");
                String input = sc.nextLine();

                // handle input
                String[] inpArr = input.split(" ");
                boolean isValidInput = isValidInput(inpArr);

                String command = inpArr[0];

                switch (command) {
                    case "start":
                        this.board = new Board();
                        board.printBoard();
                        break;
                    case "exit":
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Bad parameters!");
                        continue;
                }

                if (!isValidInput)
                    continue;

                Player p1 = Player.getPlayerInstance(inpArr[1], board, 'X', sc);
                Player p2 = Player.getPlayerInstance(inpArr[2], board, 'O', sc);

                while (board.getGameStatus() == BoardState.GAME_IN_PROGRESS) {
                    // player1 nad player2 move alternately till game finishes
                    p1.move();
                    if (board.getGameStatus() != BoardState.GAME_IN_PROGRESS) {
                        break;
                    }
                    p2.move();
                }

                System.out.println(board.getGameStatus().getStringStatus());
            }
        }

        private boolean isValidInput(String[] inpArr) {
            List<String> validInputs = List.of("user", "easy", "medium", "hard");
            if (inpArr.length != 3) {
                System.out.println("Bad parameters!");
                return false;
            }
            for (int i = 1; i < 3; i++) {   // i = 1,2
                if (!validInputs.contains(inpArr[i])) {
                    System.out.println("Bad parameters!");
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/tictactoe/GameLevel.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Optional;

    public enum GameLevel {
        EASY("easy"),
        MEDIUM("medium"),
        HARD("hard");

        private String levelStr;

        GameLevel(String levelStr) {
            this.levelStr = levelStr;
        }

        public String getLevelStr() {
            return levelStr;
        }

        public Optional<GameLevel> fromString(String text) {
            for (GameLevel level: GameLevel.values()) {
                if (text.equals(level.getLevelStr())) {
                    return Optional.of(level);
                }
            }
            return Optional.empty();
        }
    }
  learner_created: true
- name: src/tictactoe/player/EasyAiPlayer.java
  visible: true
  text: |
    package tictactoe.player;

    import tictactoe.Board;

    import java.util.Random;
    import java.util.concurrent.ThreadLocalRandom;

    public class EasyAiPlayer implements Player {

        private Board board;
        private Random rng = ThreadLocalRandom.current();
        private int MAX_CELLS = 9;

        public EasyAiPlayer(Board board) {
            this.board = board;
        }

        @Override
        public void move() {
            System.out.println("Making move level \"easy\"");

            while (true) {
                // generate a random no. b/w [0,9) corresponding to a cell that is not occupied
                int rnd = rng.nextInt(MAX_CELLS);

                // map rnd to (x,y)
                int x = rnd / 3;
                int y = rnd % 3;

                // need to add 1 as other methods expect 1-indexed coordinates in input
                if (board.isEmptyCell(x + 1 , y + 1)) {
                    board.nextMove(x + 1 , y + 1);
                    break;
                }
            }

            board.printBoard();
        }
    }
  learner_created: true
- name: src/tictactoe/PlayerHandle.java
  visible: true
  text: |
    package tictactoe;

    public enum PlayerHandle {
        X,O;
    }
  learner_created: true
- name: src/tictactoe/player/Player.java
  visible: true
  text: |
    package tictactoe.player;

    import tictactoe.Board;

    import java.util.Scanner;

    public interface Player {
        void move();

        static Player getPlayerInstance(String input, Board board, char playerAlias, Scanner sc) {
            Player pl = null;
            switch (input) {
                case "user":
                    pl = new HumanPlayer(board, sc);
                    break;
                case "easy":
                    pl = new EasyAiPlayer(board);
                    break;
                case "medium":
                    pl = new MediumAiPlayer(board, playerAlias);
                default:
                    break;
            }
            return pl;
        }
    }
  learner_created: true
- name: src/tictactoe/player/MediumAiPlayer.java
  visible: true
  text: |
    package tictactoe.player;

    import tictactoe.Board;

    import java.util.Optional;
    import java.util.Random;
    import java.util.concurrent.ThreadLocalRandom;

    public class MediumAiPlayer implements Player {

        private Board board;
        private Random rng = ThreadLocalRandom.current();
        private int MAX_CELLS = 9;
        private char player;
        private char opponent;

        public MediumAiPlayer(Board board, char player) {
            this.board = board;
            this.player = player;
            if (player == 'X')
                opponent = 'O';
            else
                opponent = 'X';
        }

        @Override
        public void move() {
            System.out.println("Making move level \"medium\"");

            Optional<String> playerCanWin = nextMoveWin(player);
            Optional<String> opponentCanWin = nextMoveWin(opponent);

            // go for win if possible
            if (playerCanWin.isPresent()) {
                String[] coordinate = playerCanWin.get().split(",");
                board.nextMove(
                        Integer.parseInt(coordinate[0]),
                        Integer.parseInt(coordinate[1])
                );
                board.printBoard();
                return;
            }

            // block if opponent is winning
            if (opponentCanWin.isPresent()) {
                String[] coordinate = opponentCanWin.get().split(",");
                board.nextMove(
                        Integer.parseInt(coordinate[0]),
                        Integer.parseInt(coordinate[1])
                );
                board.printBoard();
                return;
            }

            // otherwise, random move
            randomMove();
            board.printBoard();
        }

        private Optional<String> nextMoveWin(char playerChar) {
            char[][] grid = board.getGrid();
            int x = -1;
            int y = -1;

            for (int i = 1; i <= 3; i++) {
                for (int j = 1; j <= 3; j++) {
                    if (board.isEmptyCell(i, j)) {
                        grid[i - 1][j - 1] = playerChar;    // tmp set and check
                        if(board.isGameWon(i, j, playerChar)) {
                            x = i;
                            y = j;
                            board.setCellEmpty(x, y);       // reset tmp change
                            break;
                        }
                        board.setCellEmpty(i, j);           // reset tmp change
                    }
                }
                if (x != -1)
                    break;
            }

            if (x != -1) {                  // just checking x is enough
                return Optional.of(x + "," + y);
            }

            return Optional.empty();
        }

        private void randomMove() {
            while (true) {
                // generate a random no. b/w [0,9) corresponding to a cell that is not occupied
                int rnd = rng.nextInt(MAX_CELLS);

                // map rnd to (x,y)
                int x = rnd / 3;
                int y = rnd % 3;

                // need to add 1 as other methods expect 1-indexed coordinates in input
                if (board.isEmptyCell(x + 1 , y + 1)) {
                    board.nextMove(x + 1 , y + 1);
                    break;
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/player/MinimaxAiPlayer.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Mon, 28 Sep 2020 14:53:00 UTC
record: -1
